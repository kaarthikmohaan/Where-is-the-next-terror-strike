# -*- coding: utf-8 -*-
"""compare_to_algo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vu1l3k3Fu7au-ukXm_ADU_VzMLmMYdGz

<p><img alt="Colaboratory logo" height="45px" src="/img/colab_favicon.ico" align="left" hspace="10px" vspace="0px"></p>

<h1>What is Colaboratory?</h1>

Colaboratory, or "Colab" for short, allows you to write and execute Python in your browser, with 
- Zero configuration required
- Free access to GPUs
- Easy sharing

Whether you're a **student**, a **data scientist** or an **AI researcher**, Colab can make your work easier. Watch [Introduction to Colab](https://www.youtube.com/watch?v=inN8seMm7UI) to learn more, or just get started below!

## **Getting started**

The document you are reading is not a static web page, but an interactive environment called a **Colab notebook** that lets you write and execute code.

For example, here is a **code cell** with a short Python script that computes a value, stores it in a variable, and prints the result:
"""

seconds_in_a_day = 24 * 60 * 60
seconds_in_a_day

"""To execute the code in the above cell, select it with a click and then either press the play button to the left of the code, or use the keyboard shortcut "Command/Ctrl+Enter". To edit the code, just click the cell and start editing.

Variables that you define in one cell can later be used in other cells:
"""

seconds_in_a_week = 7 * seconds_in_a_day
seconds_in_a_week

"""Colab notebooks allow you to combine **executable code** and **rich text** in a single document, along with **images**, **HTML**, **LaTeX** and more. When you create your own Colab notebooks, they are stored in your Google Drive account. You can easily share your Colab notebooks with co-workers or friends, allowing them to comment on your notebooks or even edit them. To learn more, see [Overview of Colab](/notebooks/basic_features_overview.ipynb). To create a new Colab notebook you can use the File menu above, or use the following link: [create a new Colab notebook](http://colab.research.google.com#create=true).

Colab notebooks are Jupyter notebooks that are hosted by Colab. To learn more about the Jupyter project, see [jupyter.org](https://www.jupyter.org).

## Data science

With Colab you can harness the full power of popular Python libraries to analyze and visualize data. The code cell below uses **numpy** to generate some random data, and uses **matplotlib** to visualize it. To edit the code, just click the cell and start editing.
"""

import numpy as np
from matplotlib import pyplot as plt

ys = 200 + np.random.randn(100)
x = [x for x in range(len(ys))]

plt.plot(x, ys, '-')
plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)

plt.title("Sample Visualization")
plt.show()

"""You can import your own data into Colab notebooks from your Google Drive account, including from spreadsheets, as well as from Github and many other sources. To learn more about importing data, and how Colab can be used for data science, see the links below under [Working with Data](#working-with-data).

## Machine learning

With Colab you can import an image dataset, train an image classifier on it, and evaluate the model, all in just [a few lines of code](https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/quickstart/beginner.ipynb). Colab notebooks execute code on Google's cloud servers, meaning you can leverage the power of Google hardware, including [GPUs and TPUs](#using-accelerated-hardware), regardless of the power of your machine. All you need is a browser.

Colab is used extensively in the machine learning community with applications including:
- Getting started with TensorFlow
- Developing and training neural networks
- Experimenting with TPUs
- Disseminating AI research
- Creating tutorials

To see sample Colab notebooks that demonstrate machine learning applications, see the [machine learning examples](#machine-learning-examples) below.

## More Resources

### Working with Notebooks in Colab
- [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb)
- [Guide to Markdown](/notebooks/markdown_guide.ipynb)
- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)
- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)
- [Interactive forms](/notebooks/forms.ipynb)
- [Interactive widgets](/notebooks/widgets.ipynb)
- <img src="/img/new.png" height="20px" align="left" hspace="4px" alt="New"></img>
 [TensorFlow 2 in Colab](/notebooks/tensorflow_version.ipynb)

<a name="working-with-data"></a>
### Working with Data
- [Loading data: Drive, Sheets, and Google Cloud Storage](/notebooks/io.ipynb) 
- [Charts: visualizing data](/notebooks/charts.ipynb)
- [Getting started with BigQuery](/notebooks/bigquery.ipynb)

### Machine Learning Crash Course
These are a few of the notebooks from Google's online Machine Learning course. See the [full course website](https://developers.google.com/machine-learning/crash-course/) for more.
- [Intro to Pandas](/notebooks/mlcc/intro_to_pandas.ipynb)
- [Tensorflow concepts](/notebooks/mlcc/tensorflow_programming_concepts.ipynb)

<a name="using-accelerated-hardware"></a>
### Using Accelerated Hardware
- [TensorFlow with GPUs](/notebooks/gpu.ipynb)
- [TensorFlow with TPUs](/notebooks/tpu.ipynb)

<a name="machine-learning-examples"></a>

## Machine Learning Examples

To see end-to-end examples of the interactive machine learning analyses that Colaboratory makes possible, check out these  tutorials using models from [TensorFlow Hub](https://tfhub.dev).

A few featured examples:

- [Retraining an Image Classifier](https://tensorflow.org/hub/tutorials/tf2_image_retraining): Build a Keras model on top of a pre-trained image classifier to distinguish flowers.
- [Text Classification](https://tensorflow.org/hub/tutorials/tf2_text_classification): Classify IMDB movie reviews as either *positive* or *negative*.
- [Style Transfer](https://tensorflow.org/hub/tutorials/tf2_arbitrary_image_stylization): Use deep learning to transfer style between images.
- [Multilingual Universal Sentence Encoder Q&A](https://tensorflow.org/hub/tutorials/retrieval_with_tf_hub_universal_encoder_qa): Use a machine learning model to answer questions from the SQuAD dataset.
- [Video Interpolation](https://tensorflow.org/hub/tutorials/tweening_conv3d): Predict what happened in a video between the first and the last frame.
"""

!apt-get install -q libgeos-3.5.0
!apt-get install -q libgeos-dev
!pip install -q https://github.com/matplotlib/basemap/archive/master.zip
!pip install -q pyproj==1.9.6

import pandas as pd #creation of dataframe from data set
import numpy as np
import networkx as nx #Network related tool in the python
import matplotlib.pyplot as plt #ploting and saving the image
from mpl_toolkits.basemap import Basemap as Basemap
from matplotlib.pyplot import figure
import itertools

#Mount the drive to colab
from google.colab import drive
drive.mount('/content/drive')

# Data set from https://gtd.terrorismdata.com/app/uploads/_mediavault/2021/02/globalterrorismdb_0221dist.xlsx
# Reading the data set and strore it in the variable called df 
df = pd.read_excel (r'/content/drive/MyDrive/capston/Copy of globalterrorismdb_0919dist.xlsx')
#df = pd.read_excel (r'/content/globalterrorismdb_0919dist.xlsx')

l=len(df)
df2=df
df=df.loc[df["doubtterr"]!=1]
print(l-len(df),"rows are removed")
print("Current rown is data set is",len(df))

#convert names of target and source to unique id
name={}
i_name={}
for j,i in enumerate(set(df["country_txt"]).union(set(df["gname"]))):
  name[i]=j
  i_name[j]=i

import numpy as np
dct={}
for i in df.index:
  if df['iyear'][i]>=1970 and df['iyear'][i]<=2020:
    tp=(df["gname"][i],df["country_txt"][i])
    kill=df['nkill'][i]
    wnd=df['nwound'][i]
    prop=df['propextent'][i]
    #target=df["country_txt"][i]
    #source=df["gname"][i]
    if tp not in dct:
      dct[tp]=[1,1,1]
    if  not np.isnan(kill):
        dct[tp][0]+=3*kill
    if  not np.isnan(wnd):
        dct[tp][1]+=0.5*wnd
    if  not np.isnan(prop):
        dct[tp][2]+=abs(4-prop)

import networkx as nx
G = nx.DiGraph()
for i in dct:
  G.add_edge(name[i[0]], name[i[1]], weight=int(sum(dct[i])))
  if int(sum(dct[i]))<0:
    print(dct[i])

G1=G.copy()

#!/usr/bin/env python
# encoding: utf-8

from networkx.readwrite import json_graph
from scipy.stats import percentileofscore
from traceback import format_exception
import cProfile
import json
import networkx as nx
import numpy as np
import pandas as pd
import pstats
import random
import sys
import matplotlib.pyplot as plt
DEBUG = False # True


######################################################################
## disparity filter for extracting the multiscale backbone of
## complex weighted networks

def get_nes (graph, label):
    """
    find the neighborhood attention set (NES) for the given label
    """
    for node_id in graph.nodes():
        node = graph.node[node_id]

        if node["label"].lower() == label:
            return set([node_id]).union(set([id for id in graph.neighbors(node_id)]))


def disparity_integral (x, k):
    """
    calculate the definite integral for the PDF in the disparity filter
    """
    assert x != 1.0, "x == 1.0"
    assert k != 1.0, "k == 1.0"
    return ((1.0 - x)**k) / ((k - 1.0) * (x - 1.0))


def get_disparity_significance (norm_weight, degree):
    """
    calculate the significance (alpha) for the disparity filter
    """
    return 1.0 - ((degree - 1.0) * (disparity_integral(norm_weight, degree) - disparity_integral(0.0, degree)))


def disparity_filter (graph):
    """
    implements a disparity filter, based on multiscale backbone networks
    https://arxiv.org/pdf/0904.2389.pdf
    """
    alpha_measures = []
    
    for node_id in graph.nodes():
        node = graph.nodes[node_id]
        degree = graph.degree(node_id)
        strength = 0.0
        

        for id0, id1 in graph.edges(nbunch=[node_id]):
            edge = graph[id0][id1]
            strength += edge["weight"]

        node["strength"] = strength

        for id0, id1 in graph.edges(nbunch=[node_id]):
            edge = graph[id0][id1]

            norm_weight = edge["weight"] / strength
            edge["norm_weight"] = norm_weight

            if degree > 1:
                try:
                    if norm_weight == 1.0:
                        norm_weight -= 0.0001

                    alpha = get_disparity_significance(norm_weight, degree)
                except AssertionError:
                    report_error("disparity {}".format(repr(node)), fatal=True)

                edge["alpha"] = alpha
                alpha_measures.append(alpha)
            else:
                edge["alpha"] = 0.0

    for id0, id1 in graph.edges():
        edge = graph[id0][id1]
        edge["alpha_ptile"] = percentileofscore(alpha_measures, edge["alpha"]) / 100.0

    return alpha_measures


######################################################################
## related metrics

def calc_centrality (graph, min_degree=1):
    """
    to conserve compute costs, ignore centrality for nodes below `min_degree`
    """
    sub_graph = graph.copy()
    sub_graph.remove_nodes_from([ n for n, d in list(graph.degree) if d < min_degree ])

    centrality = nx.betweenness_centrality(sub_graph, weight="weight")
    #centrality = nx.closeness_centrality(sub_graph, distance="distance")

    return centrality


def calc_quantiles (metrics, num):
    """
    calculate `num` quantiles for the given list
    """
    global DEBUG

    bins = np.linspace(0, 1, num=num, endpoint=True)
    s = pd.Series(metrics)
    q = s.quantile(bins, interpolation="nearest")

    try:
        dig = np.digitize(metrics, q) - 1
    except ValueError as e:
        print("ValueError:", str(e), metrics, s, q, bins)
        sys.exit(-1)

    quantiles = []

    for idx, q_hi in q.iteritems():
        quantiles.append(q_hi)

        if DEBUG:
            print(idx, q_hi)

    return quantiles


def calc_alpha_ptile (alpha_measures, show=True):
    """
    calculate the quantiles used to define a threshold alpha cutoff
    """
    quantiles = calc_quantiles(alpha_measures, num=10)
    num_quant = len(quantiles)

    if show:
        print("\tptile\talpha")

        for i in range(num_quant):
            percentile = i / float(num_quant)
            print("\t{:0.2f}\t{:0.4f}".format(percentile, quantiles[i]))

    return quantiles, num_quant


def cut_graph (graph, min_alpha_ptile=0.5, min_degree=2):
    """
    apply the disparity filter to cut the given graph
    """
    filtered_set = set([])

    for id0, id1 in graph.edges():
        edge = graph[id0][id1]

        if edge["alpha_ptile"] < min_alpha_ptile:
            filtered_set.add((id0, id1))

    for id0, id1 in filtered_set:
        graph.remove_edge(id0, id1)

    filtered_set = set([])

    for node_id in graph.nodes():
        node = graph.nodes[node_id]

        if graph.degree(node_id) < min_degree:
            filtered_set.add(node_id)

    for node_id in filtered_set:
        graph.remove_node(node_id)



######################################################################
## profiling utilities

def start_profiling ():
    """start profiling"""
    pr = cProfile.Profile()
    pr.enable()

    return pr


def stop_profiling (pr):
    """stop profiling and report"""
    pr.disable()

    s = io.StringIO()
    sortby = "cumulative"
    ps = pstats.Stats(pr, stream=s).sort_stats(sortby)

    ps.print_stats()
    print(s.getvalue())


def report_error (cause_string, logger=None, fatal=False):
    """
    TODO: errors should go to logger, and not be fatal
    """
    etype, value, tb = sys.exc_info()
    error_str = "{} {}".format(cause_string, str(format_exception(etype, value, tb, 3)))

    if logger:
        logger.info(error_str)
    else:
        print(error_str)

    if fatal:
        sys.exit(-1)


######################################################################
## graph serialization

def load_graph (graph_path):
    """
    load a graph from JSON
    """
    with open(graph_path) as f:
        data = json.load(f)
        graph = json_graph.node_link_graph(data, directed=True)
        return graph


def save_graph (graph, graph_path):
    """
    save a graph as JSON
    """
    with open(graph_path, "w") as f:
        data = json_graph.node_link_data(graph)
        json.dump(data, f)


######################################################################
## testing




def describe_graph (graph, min_degree=1, show_centrality=False):
    """
    describe a graph
    """
    print("\ngraph: {} nodes {} edges\n".format(len(graph.nodes()), len(graph.edges())))

    if show_centrality:
        print(calc_centrality(graph, min_degree))

def convertGraph(G):
  graph=nx.Graph()
  for i in G.nodes:
    pred=[j for j in G.predecessors(i)]
    if len(pred):
      for j in list(itertools.combinations(pred,2)):
        graph.add_edge(j[0],j[1],weight=G[j[0]][i]['weight']+G[j[1]][i]['weight'])
    del pred
  return graph

import itertools
from heapq import *

class PQ(object):
    def __init__(self):
        self.pq = []                         # list of entries arranged in a heap
        self.entry_finder = {}               # mapping of tasks to entries
        self.REMOVED = '<removed-task>'      # placeholder for a removed task
        self.counter = itertools.count()     # unique sequence count

    def add_task(self, task, priority=0):
        'Add a new task or update the priority of an existing task'
        if task in self.entry_finder:
            self.remove_task(task)
        count = next(self.counter)
        entry = [priority, count, task]
        self.entry_finder[task] = entry
        heappush(self.pq, entry)

    def remove_task(self, task):
        'Mark an existing task as REMOVED.  Raise KeyError if not found.'
        entry = self.entry_finder.pop(task)
        entry[-1] = self.REMOVED

    def pop_item(self):
        'Remove and return the lowest priority task. Raise KeyError if empty.'
        while self.pq:
            priority, count, task = heappop(self.pq)
            if task is not self.REMOVED:
                del self.entry_finder[task]
                return task, priority
        raise KeyError('pop from an empty priority queue')

    def __str__(self):
        return str([entry for entry in self.pq if entry[2] != self.REMOVED])

'''
pq = PriorityQueue()
pq.add_task(pq.REMOVED, -100)
pq.add_task(1, -75)
pq.add_task(2, -50)
pq.add_task(pq.REMOVED, -25)
if __name__ == '_main__':
    console = []
'''

import networkx as nx

def degreeDiscountIC(G, k, p=.01):
    ''' Finds initial set of nodes to propagate in Independent Cascade model (with priority queue)
    Input: G -- networkx graph object
    k -- number of nodes needed
    p -- propagation probability
    Output:
    S -- chosen k nodes
    '''
    S = []
    dd = PQ() # degree discount
    t = dict() # number of adjacent vertices that are in S
    d = dict() # degree of each vertex

    # initialize degree discount
    for u in G.nodes():
        d[u] = sum([G[u][v]['weight'] for v in G[u]]) # each edge adds degree 1
        # d[u] = len(G[u]) # each neighbor adds degree 1
        dd.add_task(u, -d[u]) # add degree of each node
        t[u] = 0

    # add vertices to S greedily
    for i in range(k):
        u, priority = dd.pop_item() # extract node with maximal degree discount
        S.append(u)
        
        for v in G[u]:
            if v not in S:
                t[v] += G[u][v]['weight'] # increase number of selected neighbors
                #priority=d[v] - t[v]
                priority = d[v] - 2*t[v] - (d[v] - t[v])*t[v]*p # discount of degree
                #print("Priority",v,d[v],priority)
                dd.add_task(v, -priority)
    return S

def degreeDiscountIC2(G, k, p=.01):
     d = dict()
     dd = dict() # degree discount
     t = dict() # number of selected neighbors
     S = [] # selected set of nodes
     for u in G:
         d[u] = sum([G[u][v]['weight'] for v in G[u]]) # each edge adds degree 1
         # d[u] = len(G[u]) # each neighbor adds degree 1
         dd[u] = d[u]
         t[u] = 0
     for i in range(k):
         u, ddv = max(dd.items(), key=lambda v: v[1])
         dd.pop(u)
         S.append(u)
         for v in G[u]:
             if v not in S:
                 t[v] += G[u][v]['weight'] # increase number of selected neighbors
                 dd[v] = d[v] - 2*t[v] - (d[v] - t[v])*t[v]*p
     return S
    
def degreeDiscountStar(G,k,p=.01):
   
     S = []
     scores = PQ()
     d = dict()
     t = dict()
     for u in G:
         d[u] = sum([G[u][v]['weight'] for v in G[u]])
         t[u] = 0
         score = -((1-p)**t[u])*(1+(d[u]-t[u])*p)
         scores.add_task(u, )
     for iteration in range(k):
         u, priority = scores.pop_item()
         #print(iteration, -priority)
         S.append(u)
         for v in G[u]:
             if v not in S:
                 t[v] += G[u][v]['weight']
                 score = -((1-p)**t[u])*(1+(d[u]-t[u])*p)
                 scores.add_task(v, score)

import time
start = time.time()
main()
graph=convertGraph(G)
z1=degreeDiscountIC(graph, 10, 0.1)
print("Time to findout influential node with disparity filter algorithm",time.time() - start," sec")

start = time.time()
#main()
graph=convertGraph(G1)
z2=degreeDiscountIC(graph, 10, 0.1)
print("Time to findout influential node without disparity filter algorithm",time.time() - start," sec")
print("Top 10 terror groups are:\n",'\n'.join([(i_name[i[0]]+","+i_name[i[1]]) for i in list(zip(z1,z2))]))

year=[i for i in range(1970,2020,10)]+[2018]
print(year)

def norm_weight(G):
  s=sum([i[2] for i in G.edges().data("weight")])
  for i in G.edges():
    G[i[0]][i[1]]["weight"]/=s

def buildGraph(l,r):
  dct={}
  for i in df.index:
    if df['iyear'][i]>=l and df['iyear'][i]<=r:
      tp=(df["gname"][i],df["country_txt"][i])
      kill=df['nkill'][i]
      wnd=df['nwound'][i]
      prop=df['propextent'][i]
      #target=df["country_txt"][i]
      #source=df["gname"][i]
      if tp not in dct:
        dct[tp]=[1,1,1]
      if  not np.isnan(kill):
          dct[tp][0]+=3*kill
      if  not np.isnan(wnd):
          dct[tp][1]+=0.5*wnd
      if  not np.isnan(prop):
          dct[tp][2]+=abs(4-prop)
  G = nx.DiGraph()
  for i in dct:
    G.add_edge(name[i[0]], name[i[1]], weight=int(sum(dct[i])))
  return G

import time
a=[]
b=[]
min_alpha_ptile=0.5
min_degree=2
for i in range(1,6):
  start = time.time()
  graph=buildGraph(year[0],year[i])
  graph1=convertGraph(graph)
  norm_weight(graph1)
  degreeDiscountIC(graph1,10)
  a.append(time.time()-start)

  start = time.time()
  alpha_measures = disparity_filter(graph)
  cut_graph(graph, min_alpha_ptile, min_degree)
  graph1=convertGraph(graph)
  norm_weight(graph1)
  degreeDiscountIC(graph1,10)
  b.append(time.time()-start)

print(a)
print(b)
a=[0]+a
b=[0]+b

from matplotlib import pyplot as plt
plt.ylabel("time in sec")
plt.xlabel("year")
plt.plot(year,a)

from matplotlib import pyplot as plt
plt.ylabel("time in sec")
plt.xlabel("year")
plt.plot(year,b)

from matplotlib import pyplot as plt
plt.ylabel("time in sec")
plt.xlabel("year")
plt.plot(year,a)
plt.plot(year,b)